function H = hog_propio_2(I)
%%

celdaSz=8;
blSz=2;
bins=9;

tAngs = 180.0;
anchoInt = tAngs/bins;

%% Para mapear los centros de los intervalos
mCentrInt = (anchoInt/2:anchoInt:tAngs)';

%% Calcular el gradiente
[angsGrad, magsGrad] = gradiente(I);

%% Seccionar imagen en celdas
coordCeldas = coordenadas(angsGrad,celdaSz,celdaSz);

%% Inicializar matriz de histogramas
% Celdas horizontales y verticales
[he,wi] = size(I(:,:,1));
numVCells = floor(he/celdaSz);
numHCells = floor(wi/celdaSz);

% Matriz de los histogramas
histogramas = zeros(numVCells,numHCells,bins);


%% Histograma de todas las celdas en la imagen
for counter=1:size(coordCeldas,2)
    
    % Inicializar histograma de la celda actual
    h = zeros(1,bins);
    
    % Coordenadas de las celdas
    xMin = coordCeldas(1,counter);
    xMax = coordCeldas(2,counter);
    yMin = coordCeldas(3,counter);
    yMax = coordCeldas(4,counter);

    % Direcciones y magnitudes para los pixeles
    % en las celdas
    angs = angsGrad(yMin:yMax,xMin:xMax);
    angs = angs.*180/pi;
    mags = magsGrad(yMin:yMax,xMin:xMax);

    % indices for the left and right histogram bins that bound
    % the current angle value for all the pixels in the cell
    lIndices = round(angs/anchoInt);
    rIndices = lIndices+1;

    % wraping contributions over the histogram boundaries.
    lIndices(lIndices==0) = 9;
    rIndices(rIndices==10) = 1;
    
    % retrieving the left bin center value.
    lInt_centers = mCentrInt(lIndices);
    angs(angs < lInt_centers) = ...
        tAngs + angs(angs < lInt_centers);
    
    
    % calculating the contribution to both bins sides (vote weight)
    % (matrices with same size as the cell)
    rContrbutions = (angs-lInt_centers)/anchoInt;
    left_contributions = 1 - right_contributions;
    left_contributions = mags.*left_contributions;
    right_contributions = mags.*right_contributions;
    

    % computing contributions for the current histogram bin by bin.
    for bin=1:bins
        % pixels that contribute to the bin with its left portion
        pixels_to_left = (lIndices == bin);
        h(bin) = h(bin) + sum(left_contributions(pixels_to_left));
        
        % pixels that contribute to the bin with its right portion
        pixels_to_right = (rIndices == bin);
        h(bin) = h(bin) + sum(right_contributions(pixels_to_right));
    end

    % appending current hist. to the histograms matrix
    row_offset = floor(counter/numHCells + 1);
    column_offset = mod(counter-1,numHCells)+1;
    histogramas(row_offset,column_offset,:) = h(1,:);

end

% ================================================
%%          block normalization (L2 norm)
% ================================================
hist_size = blSz*blSz*bins;
% descriptor_size = hist_size*(n_v_cells-block_size+desp)*(n_h_cells-block_size+desp);
% H = zeros(descriptor_size, 1);
col = 1;
row = 1;
H = [];

%% Split the histogram matrix in blocks (this code assumes an 50% of overlap as desp is hard coded as 1)
while row <= numVCells-blSz+1
    while col <= numHCells-blSz+1
        
        % Getting all the histograms for a block
        blockHists = ...
            histogramas(row:row+blSz-1, col:col+blSz-1, :);
        
        % Getting the magnitude of the histograms of the block
        magnitude = norm(blockHists(:),2);
    
        % Divide all of the histogram values by the magnitude to normalize 
        % them.
        normalized = blockHists / (magnitude + 0.0001);

        % H = [H; normalized(:)];
        offset = (row-1)*(numHCells-blSz+1)+col;
        ini = (offset-1)*hist_size+1;
        fin = offset*hist_size;

        H(ini:fin,1) = normalized(:);

        col = col+1;
    end
    row = row+1;
    col = 1;
end
